#!/bin/sh
# gitannex-install
# Installs the standalone build of git-annex
# Copyright (C) Eskild Hustvedt 2013
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Reads a file if it exists, otherwise outputs an empty string
catFile ()
{
    if [ -e "$1" ]; then
        cat "$1"
    else
        echo ""
    fi
}

# Store the value of PATH for use when writing the wrappers
SEARCHPATH="$PATH"
# The target installation directory
INSTALLDIR="$HOME/.local/share/git-annex"
# Install globally to /usr/local if running as root
if [ "$(id -ru)" = "0" ]; then
    INSTALLDIR="/usr/local/git-annex"
    SEARCHPATH="/usr/local/bin:$PATH"
    echo "Running as root, will install globally in /usr/local"
fi
# Store the version number in this file
VERSIONFILE="$INSTALLDIR/.gitannex-install-currentversion"
# Store the gitannex-install version in this file
META_VERSIONFILE="$INSTALLDIR/.gitannex-install-metaversion"
# gitannex-install meta version
METAVERSION=1
# The mode we're running in
MODE="upgrade"
# The URL to download from (will be different for --daily)
if [ "$(uname -m)" = "x86_64" ]; then
    GET_URL="http://downloads.kitenet.net/git-annex/linux/current/git-annex-standalone-amd64.tar.gz"
else
    GET_URL="http://downloads.kitenet.net/git-annex/linux/current/git-annex-standalone-i386.tar.gz"
fi
# 1 if the user wants to force an install
FORCE=0
# 1 if the user wants to force-overwrite files
OVERWRITE=0
# 1 if the user just wants to check if an update is available
CHECK=0
# 1 if the user wants the daily build, rather than the release build
DAILY=0

# Parse command-line parameters
while [ $# -gt 0 ]; do
    case "$1" in
        --force|-f)
            FORCE=1
            ;;
        --overwrite)
            OVERWRITE=1
            ;;
        --check)
            CHECK=1
            ;;
        --daily)
            if [ "$(uname -m)" = "x86_64" ]; then
                GET_URL="http://downloads.kitenet.net/git-annex/autobuild/amd64/git-annex-standalone-amd64.tar.gz"
            else
                GET_URL="http://downloads.kitenet.net/git-annex/autobuild/i386/git-annex-standalone-i386.tar.gz"
            fi
            DAILY=1
            ;;
        --uninstall)
            if [ -x "$INSTALLDIR/uninstall" ]; then
                exec "$INSTALLDIR/uninstall"
            else
                echo "Could not locate any uninstall scripts to run."
                exit 0
            fi
            ;;
        --help|-h)
            cat << __EOF__
 gitannex-install - installs or updates the standalone git-annex build

 Usage: gitannex-install [OPTIONS]

 Options:
    --force, -f - Force an update even if it isn't needed
    --overwrite - Perform unsafe overwrites of existing git-annex files in \$PATH
    --check     - Check for updates, but don't install them
    --daily     - Install the daily snapshot builds instead of the release builds
    --uninstall - Uninstall an already installed git-annex
    --help      - Display this help screen
__EOF__
        exit 0
        ;;
        *)
            echo "Unknown parameter: $1"
            exit 1
            ;;
    esac
    shift
done


printf "%s" "Checking for the latest version..."
if [ "$DAILY" = "0" ]; then
    # Scrape the version number from git-annex's news page
    VERSION="$( wget -q -O- 'http://git-annex.branchable.com/news/' 2>/dev/null | grep -i version | head -n1 | sed -e 's/<[^>]*>//g;s/.*version //i;' )"
else
    # Use todays date as the version number
    VERSION="daily-$(date +%Y-%m-%d)"
fi
# Read the currently installed version, if any
CURRENT_VERSION="$( catFile "$VERSIONFILE" )"
# Read the currently installed meta version, if any
CURRENT_METAVERSION="$( catFile "$META_VERSIONFILE" )"
# If we failed to get any version number, exit
if [ "$VERSION" = "" ]; then
    echo "failed"
    exit 1
else
    echo "done - $VERSION"
fi
# If the version matches the installed one, then just exit now (unless the user
# wants to --force us to continue)
if [ "$VERSION" = "$CURRENT_VERSION" ] && [ "$FORCE" = "0" ] && [ "$CURRENT_METAVERSION" = "$METAVERSION" ]; then
    echo "git-annex is up to date"
    exit 0
elif [ "$CURRENT_VERSION" = "" ]; then
    MODE="install"
fi
if [ "$VERSION" = "$CURRENT_VERSION" ] && [ "$CURRENT_METAVERSION" != "$METAVERSION" ]; then
    echo "Forcing update due to changes in gitannex-install"
fi
if [ "$CHECK" = "1" ]; then
    if [ "$MODE" = "install" ]; then
        echo "Would install git-annex $VERSION"
    else
        echo "Would update git-annex from $CURRENT_VERSION to $VERSION"
    fi
    exit 0
fi
# Temporary file to save the tarball to
TEMPFILE="$(mktemp -t git-annex-standalone-package.XXXXXXXXXXX)"
mv $TEMPFILE "${TEMPFILE}.tar.gz"
TEMPFILE="${TEMPFILE}.tar.gz"
# Download the tarball
echo "Downloading git-annex $VERSION:"
wget -O "$TEMPFILE" "$GET_URL"
ret=$?
if [ "$ret" != "0" ]; then
    rm -f "$TEMPFILE"
    echo "Download failed, exiting"
    exit 1
fi
if [ -L "$INSTALLDIR" ] && [ "$INSTALLDIR" != "/usr/local/git-annex" ]; then
    INSTALLDIR_L="$(readlink "$INSTALLDIR")"
    echo "Note: $INSTALLDIR is a symlink, operating on its target: $INSTALLDIR_L"
    INSTALLDIR="$INSTALLDIR_L"
fi
# Install git-annex
if [ "$MODE" = "install" ]; then
    printf "%s" "Installing..."
else
    printf "%s" "Upgrading..."
fi
# Recreate the installation target directory
if [ -x "$INSTALLDIR/uninstall" ]; then
    "$INSTALLDIR/uninstall" >/dev/null 2>&1
fi
if [ -e "$INSTALLDIR" ]; then
    rmdir "$INSTALLDIR" || exit 1
fi
mkdir -p "$INSTALLDIR"
cd "$INSTALLDIR"
printf "%s" "."
# Extract it
tar -zxf "$TEMPFILE"
printf "%s" "."
# Move extracted files into the install directory
mv git-annex.linux/* .
printf "%s" "."
# Remove the temporary extracted directory
rmdir git-annex.linux
# Remove the tarball
rm -f "$TEMPFILE"
# Write the version number
echo "$VERSION" > "$VERSIONFILE"
echo "$METAVERSION" > "$META_VERSIONFILE"
printf "%s" "."
# This ssh's to localhost as the current user, if possible, and then retrieves the
# the PATH for that shell. This is used to ensure that the wrapper scripts get
# put into a directory that is present in the PATH used for non-interactive
# shells.
if [ "$(id -ru)" != "0" ]; then
    NONINTERACTIVE_SEARCHPATH="$( LC_ALL=C ssh -o ForwardAgent=no -o ForwardX11=no -o ConnectTimeout=1 -o BatchMode=yes "$(id -un)@127.0.0.1" 'echo "$PATH"' 2>&1)"
    RET="$?"
    if [ "$NONINTERACTIVE_SEARCHPATH" != "" ] &&  ! echo "$NONINTERACTIVE_SEARCHPATH" |grep -q 'Permission denied' && echo "$NONINTERACTIVE_SEARCHPATH" |grep -q ':' && [ "$RET" = "0" ]; then
        SEARCHPATH="$(echo "$NONINTERACTIVE_SEARCHPATH"|tail -n1):---:$SEARCHPATH"
    fi
fi
printf "%s" "."
# Find a directory in the SEARCHPATH (PATH) that is writeable
IFS=":"
FOUND_DIR=0
for pathDir in $SEARCHPATH; do
    if [ "$pathDir" = "---" ]; then
        echo ""
        echo "WARNING: Failed to find a writable directory in the PATH for"
        echo "non-interactive shells. git-annex may not work over ssh."
        echo "This could be because you don't have any directory in the PATH for"
        echo "non-interactive shells that this script can write to."
        echo "Your non-interactive PATH is: $NONINTERACTIVE_SEARCHPATH"
        printf "%s" "Continuing..."
    fi
    if [ -w "$pathDir" ]; then
        # Write a wrapper script for git-annex and git-annex-shell into
        # the path
        for file in git-annex git-annex-shell; do
            if [ -e "$pathDir/$file" ]; then
                # If the file exists and the user wants to --overwrite, just remove it
                if [ "$OVERWRITE" = "1" ]; then
                    rm -f "$pathDir/$file"
                # Check if the file was written by this script, if it wasn't then
                # skip it with a warning.
                elif ! grep -q 'Installed by gitannex-install' "$pathDir/$file"; then
                    echo ""
                    echo "WARNING: $pathDir/$file: already exists - skipped"
                    echo "You may want to manually remove this file and then re-run this script."
                    echo "(or re-run gitannex-install with --force --overwrite)"
                    continue
                fi
            fi
            FOUND_DIR="$pathDir"
            printf "%s" "."
            # Write the wrapper script
            cat << __EOF__ > "$pathDir/$file"
#!/bin/sh
# Installed by gitannex-install
exec "$INSTALLDIR/runshell" "$file" "\$@"
__EOF__
            chmod 755 "$pathDir/$file"
            # Link the wrapper script into the install directory, so that the uninstall
            # script knows where to look for it
            ln -s "$pathDir/$file" "$INSTALLDIR/.$file-wrapper"
        done
        break
    fi
done
printf "%s" "."
# Write the uninstall script
cat << __EOF__ > "$INSTALLDIR/uninstall"
#!/bin/sh
# Uninstall script for gitannex-install
printf "%s" "Uninstalling"
cd /
printf "%s" "."
[ -e "$INSTALLDIR/.git-annex-wrapper" ] && rm -f "\`readlink "$INSTALLDIR/.git-annex-wrapper"\`"
printf "%s" "."
[ -e "$INSTALLDIR/.git-annex-shell-wrapper" ] && rm -f "\`readlink "$INSTALLDIR/.git-annex-shell-wrapper"\`"
printf "%s" "."
[ -e "$INSTALLDIR/runshell" ] && rm -rf "$INSTALLDIR"
printf "%s" "."
echo "done"
__EOF__
chmod 700 "$INSTALLDIR/uninstall"
echo "done"
if [ "$MODE" = "install" ]; then
    echo "git-annex version $VERSION has been installed"
else
    echo "git-annex has been upgraded from $CURRENT_VERSION to $VERSION"
fi
if [ "$FOUND_DIR" = "0" ]; then
    echo "Warning: failed to write wrapper scripts in your PATH"
    echo "git-annex most likely won't work, you will need to create wrappers for"
    echo "$INSTALLDIR/git-annex and $INSTALLDIR/git-annex-shell"
    echo "manually"
    exit 1
elif [ "$NONINTERACTIVE_SEARCHPATH" = "" ] && [ "$(id -u)" != "0" ]; then
    echo "Note:"
    echo "Could not determine the PATH for non-interactive shells."
    echo "You may want to manually verify that $FOUND_DIR is in"
    echo "the PATH for non-interactive shells, otherwise git-annex may"
    echo "not work over ssh."
fi
