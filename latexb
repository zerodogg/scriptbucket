#!/usr/bin/perl
# latexb - a LaTeX build tool
# Copyright (C) Eskild Hustvedt 2006, 2013, 2014
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

use strict;
use warnings;
use Getopt::Long;
use File::Basename qw(basename);
use Time::HiRes qw(sleep);
use Try::Tiny;

my $Version = 0.2;

my ($RunViewer, $RunBibtex, $RunBiber);
my $PDF = 1;
my $verbosity = 0;
my $clean = 1;
my $watcher = 0;

Getopt::Long::Configure ('bundling', 'prefix_pattern=(--|-)');

# Purpose: Print formatted --help output
# Usage: PrintHelp('-shortoption', '--longoption', 'description');
#  Description will be reformatted to fit within a normal terminal
sub PrintHelp
{
	# The short option
	my $short = shift,
	# The long option
	my $long = shift;
	# The description
	my $desc = shift;
	# The generated description that will be printed in the end
	my $GeneratedDesc;
	# The current line of the description
	my $currdesc = '';
	# The maximum length any line can be
	my $maxlen = 80;
	# The length the options take up
	my $optionlen = 20;
	# Check if the short/long are LONGER than optionlen, if so, we need
	# to do some additional magic to take up only $maxlen.
	# The +1 here is because we always add a space between them, no matter what
	if ((length($short) + length($long) + 1) > $optionlen)
	{
		$optionlen = length($short) + length($long) + 1;
	}
	# Split the description into lines
	foreach my $part (split(/ /,$desc))
	{
		if(defined $GeneratedDesc)
		{
			if ((length($currdesc) + length($part) + 1 + 20) > $maxlen)
			{
				$GeneratedDesc .= "\n";
				$currdesc = '';
			}
			else
			{
				$currdesc .= ' ';
				$GeneratedDesc .= ' ';
			}
		}
		$currdesc .= $part;
		$GeneratedDesc .= $part;
	}
	# Something went wrong
	die('Option mismatch') if not $GeneratedDesc;
	# Print it all
	foreach my $description (split(/\n/,$GeneratedDesc))
	{
		printf "%-4s %-15s %s\n", $short,$long,$description;
		# Set short and long to '' to ensure we don't print the options twice
		$short = '';$long = '';
	}
	# Succeed
	return 1;
}

# Purpose: Resolve the path to a tex file
# Usage: resovled = resolvePath(path);
sub resolvePath
{
    my $file = shift;

    if (!-e $file)
    {
        if ( -e $file.'.tex')
        {
            $file = $file.'.tex';
        }
        elsif(-e $file.'tex')
        {
            $file = $file.'tex';
        }
        else
        {
            die($file.': does not exist'."\n");
        }
        printv('Autodetected '.$file."\n");
    }
    return $file;
}

# Purpose: Build a file
# Usage: buildFile(FILE);
sub buildFile
{
    my $file = shift;
    $file = resolvePath($file);

    my $rootFilePath = $file;
    $rootFilePath    =~ s/\.[^\.]+$//;

    cleanup($rootFilePath);

    my @command;
    if(InPath('xelatex'))
    {
        if ($PDF)
        {
            @command = qw(xelatex);
        }
        else
        {
            @command = qw(xelatex -no-pdf);
        }
    }
    else
    {
        if ($PDF)
        {
            if (!InPath('pdflatex'))
            {
                die('Missing either of pdflatex or xelatex'."\n");
            }
            @command = qw(pdflatex);
        }
        else
        {
            if (!InPath('latex'))
            {
                die('Missing either of pdflatex or xelatex'."\n");
            }
            @command = qw(latex);
        }
    }
    requiredSystem(@command,$file);

    if (!$RunBibtex && !$RunBiber)
    {
        # FIXME: Should just open the file internally
        if(InPath('biber') && wsystem(qw(grep -q),'{biblatex}',$file) == 0)
        {
            printv('Enabled biber due to one instance of "{biblatex}" in file'."\n");
            $RunBiber = 1;
        }
        if (!$RunBiber)
        {
            foreach(qw(bbl blg bib))
            {
                if (-e $rootFilePath.'.'.$_)
                {
                    printv('Enabled bibtex due to existance of '.$rootFilePath.'.'.$_."\n");
                    $RunBibtex = 1;
                    last;
                }
            }
            if (!$RunBibtex)
            {
                # FIXME: Should just open the file internally
                if(wsystem(qw(grep -q),'bibliography{',$file) == 0)
                {
                    printv('Enabled bibtex due to one instance of "bibliography{" in file'."\n");
                    $RunBibtex = 1;
                }
            }
        }
    }

    if ($RunBibtex)
    {
        foreach my $type (qw(bibtexu bibtex8 bibtex))
        {
            if(InPath($type))
            {
                requiredSystem($type,$rootFilePath);
                last;
            }
        }
    }
    elsif($RunBiber)
    {
        requiredSystem('biber',$rootFilePath);
    }

    requiredSystem(@command,$file);
    requiredSystem(@command,$file);

    cleanup($rootFilePath);

	if($RunViewer)
    {
        my @runcommand;
		if($PDF)
        {
			$file =~ s/tex$/pdf/;
            @runcommand = qw(evince);
		}
        else
        {
			$file =~ s/tex$/dvi/;
            @runcommand = qw(xdvi -thorough);
		}
        if (!-e $file)
        {
            die($file.': does not exist, unable to display document'."\n");
        }
        wsystem(@runcommand,$file);
	}
}

# Purpose: Check for a file in path
# Usage: InPath(FILE)
sub InPath
{
	foreach (split /:/, $ENV{PATH}) { if (-x "$_/@_" and ! -d "$_/@_" ) {	return "$_/@_"; } } return 0;
}

# Purpose: system() wrapper
# Usage: Same as system
sub wsystem
{
    printv('Running: '.join(' ',@_)."\n");
    return system(@_);
}

# Purpose: system() wrapper that dies if the commands exits with nonzero
# Usage: Same as wsystem
sub requiredSystem
{
    if(wsystem(@_) != 0)
    {
        die('The command "'.join(' ',@_).'" exited with nonzero, bailing out.'."\n");
    }
}

# Purpose: print a message in verbose mode
# Usage: same as warn() (NOT print())
sub printv
{
    if ($verbosity > 0)
    {
        warn(@_);
    }
}

# Purpose: Perform cleanup
# Usage: cleanup(baseFile);
sub cleanup
{
    my $rootFilePath = shift;
    if ($clean)
    {
        foreach my $ext (qw(.aux .bbl .blg .log .out .toc -blx.bib .bcf .run.xml))
        {
            if (-e $rootFilePath.$ext)
            {
                unlink($rootFilePath.$ext);
            }
        }
    }

}

# Get commandline options
GetOptions (
    'v|verbose' => \$verbosity,
    'P|no-pdf' => sub { $PDF = 0 },
    'b|bib' => \$RunBibtex,
    'x|e|evince|viewer|xdvi' => \$RunViewer,
    'C|no-clean' => sub { $clean = 0 },
    'w|watch' => \$watcher,
    # This is used by default, kept for compatibility reasons
    'p|pdf' => sub { $PDF = 1},
    'h|help' => sub
    {
        print "latexb - LaTeX builder $Version\n\n";
        print "Usage: $0 [OPTIONS] filename.tex\n\n";
        PrintHelp('-b', '--bib', 'Run through bibtex or bieber. latexb will usually autodetect this, rendering this option unneccessary.');
        PrintHelp('-P', '---pdf', 'Use latex instead of pdflatex (generate a *.dvi)');
        PrintHelp('-x', '--viewer', 'Run a viewer (evince, xdvi) on the generated file');
        PrintHelp('-h', '--help', 'Display this help screen');
        print "\nIf --evince is supplied when building a dvi it acts as an alias for -x\n";
        print "If --xdvi is supplied when building a pdf it acts as an alias for -e\n";
        exit(0);
    },
) or die("See $0 --help for more information\n");

die("Requires one option: the file to build\n") if not @ARGV;

if ($watcher)
{
    if (scalar(@ARGV) > 1)
    {
        die('Watch can only operate on a single file'."\n");
    }
    my $file = resolvePath(shift(@ARGV));
    if (!InPath('inotifywait'))
    {
        die('Watch requires the inotifywait program to be installed'."\n");
    }
    my @inotifyCommand = qw{inotifywait -q -q};
    while(1)
    {
        print 'Watching '.$file.' for changes...'."\n";
        if(system(@inotifyCommand,$file) != 0)
        {
            exit(0);
        }
        while(!-e $file)
        {
            sleep(0.2);
        }
        try
        {
            buildFile($file);
        }
        catch
        {
            warn($_);
        };
        print "\n";
    }
}
else
{
    foreach my $CurrentFile (@ARGV)
    {
        buildFile($CurrentFile);
    }
}
